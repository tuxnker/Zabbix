#!/usr/bin/perl
#
#
# AUTHORS:
#	Copyright (C) 2003-2012 Opsview Limited. All rights reserved
#
#    This file is part of Opsview
#
#    Opsview is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Opsview is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Opsview; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

use lib qw ( /usr/local/nagios/perl/lib );
use Net::SNMP;
use Getopt::Std;

$script         = "check_snmp_netscaler_serverconnections";
$script_version = "2.1.0";

$metric = 1;

# Netscaler root OID= 1.3.6.1.4.1.5951

$oid_sysDescr          = ".1.3.6.1.2.1.1.1.0";
$oid_serverconnections = ".1.3.6.1.4.1.5951.4.1.1.46.1.0";

$ipaddress    = "192.168.1.1"; # Default IP address
$version      = "1";           # SNMP version
$community    = "public";
$timeout      = 2;             # Response timeout (seconds)
$warning      = 80;
$critical     = 90;
$status       = 0;
$returnstring = "";
my $port = 161;

$defaultcommunity = "public";               # Default community string
$configfilepath   = "/usr/local/nagios/etc";

# Do we have enough information?
if ( @ARGV < 1 ) {
    print "Too few arguments\n";
    usage();
}

getopts( "hH:C:w:c:p:" );
if ($opt_h) {
    usage();
    exit(0);
}
if ($opt_H) {
    $hostname = $opt_H;

    # print "Hostname $opt_H\n";
}
else {
    print "No hostname specified\n";
    usage();
}
if ($opt_C) {
    $defaultcommunity = $opt_C;

    # print "Using community $opt_C\n";
}
else {

    # print "Using community $community\n";
}
if ($opt_w) {
    $warning = $opt_w;

    # print "Warning threshold: $opt_w%\n";
}
if ($opt_c) {
    $critical = $opt_c;

    # print "Critical threshold: $opt_c%\n";
}
if ($opt_p) {
    $port = $opt_p;
}

# Create the SNMP session
my ( $s, $e ) = Net::SNMP->session(
    -community => return_snmpcommunity($hostname),
    -hostname  => $hostname,
    -version   => $version,
    -timeout   => $timeout,
    -port      => $port,
);

main();

# Close the session
$s->close();

if ( $returnstring eq "" ) {
    $status = 3;
}

if ( $status == 0 ) {
     print "$serverconnections\n";
}
elsif ( $status == 1 ) {
     print "$serverconnections\n";
}
elsif ( $status == 2 ) {
     print "$serverconnections\n";
}
else {
     print "$serverconnections\n";
}

exit $status;

####################################################################
# This is where we gather data via SNMP and return results         #
####################################################################

sub main {

    if ( !defined( $s->get_request($oid_serverconnections) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $serverconnections = $s->var_bind_list()->{$_};
    }

    if ( $serverconnections >= $critical ) {
        $status = 2;
    }
    elsif ( $serverconnections >= $warning ) {
        $status = 1;
    }

    $temp =
      "Server connections: $serverconnections|connections=$serverconnections";

    append($temp);
}

####################################################################
# help and usage information                                       #
####################################################################

sub usage {
    print << "USAGE";
--------------------------------------------------------------------	 
$script v$script_version

Returns Netscaler server connections

Usage: $script -H <hostname> -c <community> [...]
Options: -H 		Hostname or IP address
         -p 		Port (default: 161)
         -C 		Community (default is public)
         -w 		Warning threshold
         -c 		Critical threshold
	 
--------------------------------------------------------------------	 
Copyright (C) 2003-2012 Opsview Limited. All rights reserved	 
	 
This program is free software; you can redistribute it or modify
it under the terms of the GNU General Public License
--------------------------------------------------------------------

USAGE
    exit 1;
}

####################################################################
# Appends string to existing $returnstring                         #
####################################################################

sub append {
    my $appendstring = @_[0];
    $returnstring = "$returnstring$appendstring";
}

####################################################################
# Returns the SNMP community string for a given hostname / IP      #
####################################################################

sub return_snmpcommunity {
    my $requiredhostname = @_[0];
    my $returncommunity  = $defaultcommunity;
    my $tempcommunity    = "";
    my $temphostname     = "";

    my $row     = 0;
    my $nullval = 0;

    if ( -e "$configfilepath/livehosttable.db" ) {
        open INFILE, "<$configfilepath/livehosttable.db"
          or die "Can't open file $configfilepath/livehosttable.db $1";
        foreach $line (<INFILE>) {
            (
                $temphostname, $nullval, $nullval, $nullval, $nullval, $nullval,
                $nullval, $tempcommunity
            ) = split( /:/, $line );
            if ( $temphostname eq $requiredhostname ) {
                if ( $tempcommunity eq "" ) {
                    $returncommunity = $defaultcommunity;
                }
                else {
                    $returncommunity = $tempcommunity;

                    # print "lookup for $temphostname successful: $tempcommunity\n";
                }
                last;
            }
        }
    }
    else {
    }
    close INFILE;
    return ($returncommunity);
}
